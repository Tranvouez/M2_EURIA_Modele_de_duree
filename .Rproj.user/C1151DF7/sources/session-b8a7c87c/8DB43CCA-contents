## Examen 2018 Exercice 2

library(StMoMo)

d=EWMaleData

De=d$Dxt # décès

ages=d$ages
annees=d$years

Ex=EWMaleData$Ext  # Expositions en milieu d'années
Lx=Ex+De/2 # Expos en début d'année (approximation)

# calcul des taux de mortalité bruts pour 2011
q=De[,"2011"]/ Lx[,"2011"] # taux bruts
plot(ages,q,type='l')
plot(ages, log(q),type='l')

# on peut utiliser le package fmsb pour calibrer le modèle G.M.
# optimisation avec la fonction R fitGM
library(fmsb)
fit=fitGM(data=q)  # modèle h(x)= C+ A exp(Bx)
fit
A=fit[1]
B=fit[2]
C=fit[3]
c(A,B,C)

# Lien avec l'autre paramétrage :
# h(x)= alpha + beta gamma^x
alpha2=C
beta2=A
gamma2=exp(B)
c(alpha2,beta2,gamma2)  

##########################

#plot(ages,q,type='l',col='blue')
qM3=1-exp(-C)*exp(-A/B*exp(B*ages)*(exp(B)-1))

plot(ages,q,type='l')
lines(ages, qM3,col='brown')


plot(ages,log(q),type='l',col='blue')
lines(ages,log(qM3),col='red')
# Le modèle de Gompertz - Makeham, avec h croissant, ne peut pas modéliser correctement 
# la mortalité aux âges inférieurs à 20 ans.


##########
# Il est également possible d'utiliser un autre package :
library(MortalityLaws)

# Il existe un grand nombre de modèles pour modéliser la mortalité :
# (plus ou moins adaptés à différents types de mortalité)
availableLaws()

# Prenons le modèle de G.M. :
fit=MortalityLaw(x=0:100,qx=q,law="makeham")  #modèle h(x)= C+ A exp(Bx)
fit$coefficients
A=fit$coefficients["A"]
B=fit$coefficients["B"]
C=fit$coefficients["C"]
c(A,B,C)

# Lien avec l'autre paramétrage :
# h(x)= alpha + beta gamma^x
alpha2=C
beta2=A
gamma2=exp(B)
c(alpha2,beta2,gamma2)

qM4=1-exp(-C)*exp(-A/B*exp(B*ages)*(exp(B)-1))
lines(ages,log(qM4),col='green')

 


#############################
#  Modèle de Lee Carter     #
#############################

library(forecast)
library(demography)
muh=De/Ex
Baseh=demogdata(data=muh,pop=Ex,ages=ages,years=annees,type="mortality",label='G.B.',name='Hommes',lambda=1)

lch=lca(Baseh)

# Estimation de alpha_x
plot(lch$age,lch$ax,col="blue")

# Estimation de beta_x
plot(lch$age,lch$bx,col="blue")

# Estimation des k_t
kt=lch$kt
plot(annees,kt)

# Projection des k_t :
# méthode de Lee & Carter (1992)
# hyp.: k_t = k_{t-1}+d + e_t
plot(lch)
proj=forecast(lch,h=20)
plot(proj,plot.type="component")

# ou bien un auto-arima pour modéliser et projeter les k_t :
ar=auto.arima(kt)
plot(forecast(ar,h=20))

## L.C. sans ajustement des k_t
lch_sans=lca(Baseh,adjust="none")
plot(lch$year,lch$kt,col="blue",type='l',main="Effet ajustement sur les k_t")
lines(lch_sans$year,lch_sans$kt,col='red')
legend(1960,-20, legend=c("avec ajust.", "sans ajust."),col=c("blue", "red"), lty=1, cex=0.8)


# comparaison avec G.M.
predh=lch$fitted$y  # c'est log(mu_{x,t}) qui est prédit
mupred2011=exp(predh[,51])

plot(ages,q,type='l')
lines(ages, qM3,col='blue') # G.M.
lines(ages,mupred2011,col='red')

plot(mupred2011-qM3)
max(abs(mupred2011-qM3))

# comparaison graphique des modèles pour 2011
plot(ages,log(q))
lines(ages,log(qM3),col='blue') # GM (fmsb)
lines(ages,log(qM4),col='green') # mortalitylaw
lines(ages,predh[,51],col='red') # Lee Carter


### calcul des rentes
# Projections des \mu{x,t} dans le futur :
# projection standard du modèle de Lee-Carter :
projh=forecast(lch,h=70)$rate$Hommes

dim(projh)
colnames(projh)=2012:(2012+69)
rownames(projh)=0:100
View(projh)

# nous souhaitons calculer la prime pure d'une rente viagère 
# à partir de 2012 pour l'âge de 65 ans
# a_x(t)= \sum_{k\ge 0} { \prod_{j=0}^k exp(-\mu_{x+j}(t+j)) *1/(1+r)^(k+1) }

r=0.035 # valeur du taux choisi pour le facteur d'actualisation

# calcul de a_65(2012) pour les hommes :

L=length(66:101)
mu=projh[66:101,1:L] # on limite aux âges 65-100
dmu=diag(mu)
prodexpmu=cumprod(exp(-dmu))
a=0
for (k in 1:length(dmu))
{ a=a+ 1/(1+r)^(k)*prodexpmu[k] }
a  # 13.164

# Remarque : si on prolonge jusqu'à 120 ans avec les mêmes \mu(x,t) ?
# (pour vérifier si négliger les âges > 110 est justifié)
dmu120=c(dmu,rep(dmu[L],20))
prodexpmu120=cumprod(exp(-dmu120))
a120=0
for (k in 1:(L+20))
{ a120=a120+ 1/(1+r)^(k)*prodexpmu120[k] }
a120 # 13.174


# Comparaison avec G.M. I  (fmsb)
dmu=qM3[66:101]
prodexpmu=cumprod(exp(-dmu))
a=0
for (k in 1:length(dmu))
{ a=a+ 1/(1+r)^(k)*prodexpmu[k] }
a
# 12.13

# Comparaison avec G.M. II  (Mortalitylaw)
dmu=qM4[66:101]
prodexpmu=cumprod(exp(-dmu))
a=0
for (k in 1:length(dmu))
{ a=a+ 1/(1+r)^(k)*prodexpmu[k] }
a
# 12.77

